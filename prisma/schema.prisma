generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["ownerdb", "public"]
}

model User {
  id                                                            Int                   @id @default(autoincrement())
  name                                                          String                @db.VarChar(50)
  email                                                         String                @unique @db.VarChar(100)
  password                                                      String?               @db.VarChar(255)
  phonenum                                                      String?               @db.VarChar(20)
  user_three_ability                                            Int
  preferGame                                                    GameType              @default(FOUR_BALL)
  loginAt                                                       DateTime              @default(now())
  logoutAt                                                      DateTime              @default(now())
  createdAt                                                     DateTime              @default(now())
  mb_id                                                         String?               @unique(map: "bi_user_mb_id_unique") @db.VarChar
  mb_today_login                                                DateTime?             @db.Date
  mb_login_ip                                                   String?               @db.VarChar
  mb_memo_cnt                                                   Int?
  social_id                                                     String?               @db.VarChar(100)
  profile_image                                                 String?               @db.VarChar(255)
  provider                                                      String?               @db.VarChar(20)
  location                                                      String?
  latitude                                                      Float?                @db.Real
  longitude                                                     Float?                @db.Real
  user_four_ability                                             Int?
  agree_terms                                                   Boolean               @default(false)
  agree_privacy                                                 Boolean               @default(false)
  agree_location                                                Boolean               @default(false)
  agree_marketing                                               Boolean?
  agreed_at                                                     DateTime?             @default(now()) @db.Timestamp(6)
  preferred_age_group                                           String[]              @default([])
  preferred_gender                                              String                @default("")
  preferred_skill_level                                         String[]              @default([])
  play_style                                                    String[]              @default([])
  preferred_time                                                String[]              @default([])
  address                                                       String?               @db.VarChar
  favorite_store_ids                                            Int[]                 @default([])
  clubs                                                         Club[]
  clubMembers                                                   ClubMember[]
  bi_match_bi_match_loser_idTobi_user                           bi_match[]            @relation("bi_match_loser_idTobi_user")
  bi_match_bi_match_player1_idTobi_user                         bi_match[]            @relation("bi_match_player1_idTobi_user")
  bi_match_bi_match_player2_idTobi_user                         bi_match[]            @relation("bi_match_player2_idTobi_user")
  bi_match_bi_match_winner_idTobi_user                          bi_match[]            @relation("bi_match_winner_idTobi_user")
  bi_match_dispute_bi_match_dispute_reporter_idTobi_user        bi_match_dispute[]    @relation("bi_match_dispute_reporter_idTobi_user")
  bi_match_dispute_bi_match_dispute_resolved_byTobi_user        bi_match_dispute[]    @relation("bi_match_dispute_resolved_byTobi_user")
  bi_match_evaluation_bi_match_evaluation_evaluator_idTobi_user bi_match_evaluation[] @relation("bi_match_evaluation_evaluator_idTobi_user")
  bi_match_evaluation_bi_match_evaluation_target_idTobi_user    bi_match_evaluation[] @relation("bi_match_evaluation_target_idTobi_user")
  bi_match_request_bi_match_request_recipient_idTobi_user       bi_match_request[]    @relation("bi_match_request_recipient_idTobi_user")
  bi_match_request_bi_match_request_requester_idTobi_user       bi_match_request[]    @relation("bi_match_request_requester_idTobi_user")
  bi_match_result_bi_match_result_loser_idTobi_user             bi_match_result[]     @relation("bi_match_result_loser_idTobi_user")
  bi_match_result_bi_match_result_owner_idTobi_user             bi_match_result[]     @relation("bi_match_result_owner_idTobi_user")
  bi_match_result_bi_match_result_winner_idTobi_user            bi_match_result[]     @relation("bi_match_result_winner_idTobi_user")

  @@unique([social_id, provider], map: "unique_social_id_provider")
  @@map("bi_user")
  @@schema("public")
}

model Game {
  id          Int      @id @default(autoincrement())
  gameType    GameType
  description String?
  gameAverage String?
  gameHighrun Int
  gameInning  Int
  createdAt   DateTime @default(now())
  endAt       DateTime @default(now())

  @@map("bi_game")
  @@schema("public")
}

model Club {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  description String?
  userId      Int
  isPossible  Boolean
  createdAt   DateTime     @default(now())
  endAt       DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  members     ClubMember[]

  @@map("bi_club")
  @@schema("public")
}

model ClubMember {
  clubId   Int
  userId   Int
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([clubId, userId])
  @@map("bi_clubmember")
  @@schema("public")
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String   @db.VarChar(100)
  address     String   @db.VarChar(255)
  latitude    Float
  longitude   Float
  phone       String?  @db.VarChar(20)
  timeStart   DateTime
  timeEnd     DateTime
  threeBall   Int
  fourBall    Int
  tableType   Int
  createdAt   DateTime @default(now())

  @@map("bi_location")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_admin {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  role       String
  last_login DateTime? @db.Timestamp(6)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_maintenance_record {
  id          Int      @id @default(autoincrement())
  table_id    Int
  date        DateTime @db.Timestamp(6)
  description String
  status      String
  checked_by  String
  bi_table    bi_table @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_member {
  id               Int                @id @default(autoincrement())
  name             String
  phone            String             @unique
  grade            String
  join_date        DateTime?          @default(now()) @db.Timestamp(6)
  visits           Int?               @default(0)
  total_spent      Int?               @default(0)
  point            Int?               @default(0)
  last_visit       DateTime?          @db.Timestamp(6)
  bi_usage_history bi_usage_history[]

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_reservations {
  id               Int       @id @default(autoincrement())
  store_id         Int
  table_number     Int
  customer_name    String    @db.VarChar(50)
  phone            String    @db.VarChar(20)
  reservation_date DateTime  @db.Date
  start_time       DateTime  @db.Time(6)
  end_time         DateTime  @db.Time(6)
  status           String?   @default("confirmed") @db.VarChar(20)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  bi_id            String?   @db.VarChar
  bi_store         bi_store  @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_setting {
  id         Int       @id @default(autoincrement())
  key        String    @unique
  value      String
  category   String
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("ownerdb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_store {
  id               Int                      @id @default(autoincrement())
  name             String
  business_no      String?
  owner_name       String?
  phone            String?
  address          String?
  open_time        String?
  close_time       String?
  comment          String?                  @db.VarChar
  hourly_rate      Int?
  per_minute       Int?
  least_rate       Int?
  open_yoil        String?
  bi_id            String?                  @unique(map: "unique_bi_id") @db.VarChar
  has_table        Int?
  directions       String?                  @db.VarChar
  parking_type     String?                  @db.VarChar
  parking_capacity Int?
  parking_note     String?                  @db.VarChar
  weekend_rate     Int?
  brand            String?                  @db.VarChar
  facilities       String?                  @db.VarChar
  saturday_open    String?                  @db.VarChar
  saturday_close   String?                  @db.VarChar
  sunday_open      String?                  @db.VarChar
  sunday_close     String?                  @db.VarChar
  regular_holiday  String?
  created_at       DateTime?                @db.Date
  updated_at       DateTime?                @db.Date
  phone_store      String?                  @db.VarChar
  coord_x          String?                  @db.VarChar
  coord_y          String?                  @db.VarChar
  register_id      String?                  @db.VarChar
  geom             Unsupported("geometry")?
  bi_reservations  bi_reservations[]

  @@index([geom], map: "idx_bi_store_geom", type: Gist)
  @@map("bi_store")
  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_table {
  id                    Int                     @id @default(autoincrement())
  name                  String
  type                  String
  status                String
  hourly_rate           Int
  bi_id                 String                  @db.VarChar
  table_no              Int?
  x                     Float?                  @default(50)
  y                     Float?                  @default(50)
  width                 Float?                  @default(120)
  height                Float?                  @default(60)
  rotation              Int?
  bi_maintenance_record bi_maintenance_record[]
  bi_usage_history      bi_usage_history[]

  @@schema("ownerdb")
}

model bi_usage_history {
  id        Int       @id @default(autoincrement())
  member_id Int
  table_id  Int
  date      DateTime  @db.Timestamp(6)
  duration  Float
  amount    Int
  bi_member bi_member @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_table  bi_table  @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_match {
  match_id                             Int                   @id(map: "matches_pkey") @default(autoincrement())
  player1_id                           String?               @db.VarChar
  player2_id                           String?               @db.VarChar
  match_date                           DateTime?             @default(now()) @db.Timestamp(6)
  location                             String?               @db.VarChar(255)
  player1_score                        Int?
  player2_score                        Int?
  winner_id                            String?               @db.VarChar
  loser_id                             String?               @db.VarChar
  player1_dama                         Decimal?              @db.Decimal(5, 2)
  player2_dama                         Decimal?              @db.Decimal(5, 2)
  match_duration                       Int?
  request_status                       request_status?
  request_date                         DateTime?             @default(now()) @db.Timestamp(6)
  response_date                        DateTime?             @db.Timestamp(6)
  preferred_date                       DateTime?             @db.Timestamp(6)
  message                              String?               @db.VarChar(500)
  cancel_reason                        String?               @db.VarChar(200)
  cancelled_by                         String?               @db.VarChar
  is_notified                          Boolean?              @default(false)
  notification_date                    DateTime?             @db.Timestamp(6)
  match_status                         match_status?         @default(PENDING)
  game_type                            game_type_enum?
  bi_user_bi_match_loser_idTobi_user   User?                 @relation("bi_match_loser_idTobi_user", fields: [loser_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction, map: "matches_loser_id_fkey")
  bi_user_bi_match_player1_idTobi_user User?                 @relation("bi_match_player1_idTobi_user", fields: [player1_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction, map: "matches_player1_id_fkey")
  bi_user_bi_match_player2_idTobi_user User?                 @relation("bi_match_player2_idTobi_user", fields: [player2_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction, map: "matches_player2_id_fkey")
  bi_user_bi_match_winner_idTobi_user  User?                 @relation("bi_match_winner_idTobi_user", fields: [winner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction, map: "matches_winner_id_fkey")
  bi_match_dispute                     bi_match_dispute[]
  bi_match_evaluation                  bi_match_evaluation[]
  bi_match_request                     bi_match_request[]
  bi_match_result                      bi_match_result[]

  @@schema("public")
}

model bi_match_request {
  request_id                                     Int       @id @default(autoincrement())
  match_id                                       Int
  requester_id                                   String    @db.VarChar
  recipient_id                                   String    @db.VarChar
  request_status                                 String?   @default("PENDING") @db.VarChar(10)
  request_date                                   DateTime? @default(now()) @db.Timestamp(6)
  response_date                                  DateTime? @db.Timestamp(6)
  preferred_date                                 DateTime? @db.Timestamp(6)
  message                                        String?   @db.VarChar(500)
  game_type                                      String?   @db.VarChar(10)
  location                                       String?   @db.VarChar(255)
  is_notified                                    Boolean?  @default(false)
  bi_match                                       bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_request_recipient_idTobi_user User      @relation("bi_match_request_recipient_idTobi_user", fields: [recipient_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_request_requester_idTobi_user User      @relation("bi_match_request_requester_idTobi_user", fields: [requester_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model bi_match_dispute {
  dispute_id                                    Int       @id @default(autoincrement())
  match_id                                      Int
  reporter_id                                   String    @db.VarChar
  dispute_type                                  String?   @db.VarChar(50)
  description                                   String?
  evidence_urls                                 String[]
  status                                        String?   @default("PENDING") @db.VarChar(20)
  resolved_by                                   String?   @db.VarChar
  resolved_at                                   DateTime? @db.Timestamp(6)
  resolution_note                               String?
  created_at                                    DateTime? @default(now()) @db.Timestamp(6)
  bi_match                                      bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_dispute_reporter_idTobi_user User      @relation("bi_match_dispute_reporter_idTobi_user", fields: [reporter_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_dispute_resolved_byTobi_user User?     @relation("bi_match_dispute_resolved_byTobi_user", fields: [resolved_by], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_match_evaluation {
  evaluation_id                                     Int       @id @default(autoincrement())
  match_id                                          Int
  evaluator_id                                      String    @db.VarChar
  target_id                                         String    @db.VarChar
  manner_rating                                     Int?
  skill_rating                                      Int?
  skill_accuracy_rating                             Int?
  comment                                           String?
  created_at                                        DateTime? @default(now()) @db.Timestamp(6)
  is_anonymous                                      Boolean?  @default(false)
  reported                                          Boolean?  @default(false)
  bi_user_bi_match_evaluation_evaluator_idTobi_user User      @relation("bi_match_evaluation_evaluator_idTobi_user", fields: [evaluator_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_match                                          bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_evaluation_target_idTobi_user    User      @relation("bi_match_evaluation_target_idTobi_user", fields: [target_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model bi_match_result {
  result_id                                  Int       @id @default(autoincrement())
  match_id                                   Int
  winner_id                                  String    @db.VarChar
  loser_id                                   String    @db.VarChar
  winner_score                               Int
  loser_score                                Int
  game_duration                              Int?
  verified_by                                String?   @default("PENDING") @db.VarChar(20)
  verified_at                                DateTime? @db.Timestamp(6)
  owner_id                                   String?   @db.VarChar
  player1_confirm                            Boolean?  @default(false)
  player2_confirm                            Boolean?  @default(false)
  created_at                                 DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime? @default(now()) @db.Timestamp(6)
  status                                     String?   @default("PENDING") @db.VarChar(20)
  bi_user_bi_match_result_loser_idTobi_user  User      @relation("bi_match_result_loser_idTobi_user", fields: [loser_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_match                                   bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_result_owner_idTobi_user  User?     @relation("bi_match_result_owner_idTobi_user", fields: [owner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_result_winner_idTobi_user User      @relation("bi_match_result_winner_idTobi_user", fields: [winner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

enum GameType {
  THREE_BALL @map("3구")
  FOUR_BALL  @map("4구")

  @@schema("public")
}

enum game_type_enum {
  THREE_BALL
  FOUR_BALL
  POCKET_BALL

  @@schema("public")
}

enum match_request_type_enum {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED

  @@schema("public")
}

enum match_status {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  EVALUATE

  @@schema("public")
}

enum match_status_enum {
  COMPLETED
  ONGOING
  CANCELED

  @@schema("public")
}

enum request_status {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED

  @@schema("public")
}
