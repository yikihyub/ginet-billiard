generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["ownerdb", "public"]
}

model User {
  id                                                            Int                             @id @default(autoincrement())
  name                                                          String                          @db.VarChar(50)
  email                                                         String                          @unique @db.VarChar(100)
  password                                                      String?                         @db.VarChar(255)
  phonenum                                                      String?                         @db.VarChar(20)
  preferGame                                                    GameType                        @default(FOUR_BALL)
  loginAt                                                       DateTime                        @default(now())
  logoutAt                                                      DateTime                        @default(now())
  createdAt                                                     DateTime                        @default(now())
  address                                                       String?                         @db.VarChar
  agree_location                                                Boolean                         @default(false)
  agree_marketing                                               Boolean?
  agree_marketing_privacy                                       Boolean?
  agree_privacy                                                 Boolean                         @default(false)
  agree_terms                                                   Boolean                         @default(false)
  agreed_at                                                     DateTime?                       @default(now()) @db.Timestamp(6)
  favorite_store_ids                                            Int[]                           @default([])
  latitude                                                      Float?                          @db.Real
  location                                                      String?
  longitude                                                     Float?                          @db.Real
  mb_id                                                         String?                         @unique(map: "bi_user_mb_id_unique") @db.VarChar
  mb_login_ip                                                   String?                         @db.VarChar
  mb_memo_cnt                                                   Int?
  mb_today_login                                                DateTime?                       @db.Date
  play_style                                                    String[]                        @default([])
  preferred_age_group                                           String[]                        @default([])
  preferred_gender                                              String                          @default("")
  preferred_skill_level                                         String[]                        @default([])
  preferred_time                                                String[]                        @default([])
  profile_image                                                 String?                         @db.VarChar(255)
  provider                                                      String?                         @db.VarChar(20)
  push_auth                                                     String?
  push_enabled                                                  Boolean?                        @default(false)
  push_endpoint                                                 String?
  push_p256dh                                                   String?
  social_id                                                     String?                         @db.VarChar(100)
  user_four_ability                                             Int?
  user_three_ability                                            Int
  bi_alert                                                      bi_alert[]
  bi_alert_log                                                  bi_alert_log[]
  bi_chat_room_participants                                     bi_chat_room_participants[]
  bi_club                                                       Club[]
  bi_club_announcement                                          bi_club_announcement[]
  bi_club_gallery                                               bi_club_gallery[]
  bi_club_join_request                                          bi_club_join_request[]
  bi_club_member                                                bi_club_member[]
  bi_club_schedule_participants                                 bi_club_schedule_participants[]
  bi_match_bi_match_loser_idTobi_user                           bi_match[]                      @relation("bi_match_loser_idTobi_user")
  bi_match_bi_match_player1_idTobi_user                         bi_match[]                      @relation("bi_match_player1_idTobi_user")
  bi_match_bi_match_player2_idTobi_user                         bi_match[]                      @relation("bi_match_player2_idTobi_user")
  bi_match_bi_match_winner_idTobi_user                          bi_match[]                      @relation("bi_match_winner_idTobi_user")
  bi_match_dispute_bi_match_dispute_reporter_idTobi_user        bi_match_dispute[]              @relation("bi_match_dispute_reporter_idTobi_user")
  bi_match_dispute_bi_match_dispute_resolved_byTobi_user        bi_match_dispute[]              @relation("bi_match_dispute_resolved_byTobi_user")
  bi_match_evaluation_bi_match_evaluation_evaluator_idTobi_user bi_match_evaluation[]           @relation("bi_match_evaluation_evaluator_idTobi_user")
  bi_match_evaluation_bi_match_evaluation_target_idTobi_user    bi_match_evaluation[]           @relation("bi_match_evaluation_target_idTobi_user")
  bi_match_participant                                          bi_match_participant[]
  bi_match_reg                                                  bi_match_reg[]
  bi_match_request_bi_match_request_recipient_idTobi_user       bi_match_request[]              @relation("bi_match_request_recipient_idTobi_user")
  bi_match_request_bi_match_request_requester_idTobi_user       bi_match_request[]              @relation("bi_match_request_requester_idTobi_user")
  bi_match_result_bi_match_result_loser_idTobi_user             bi_match_result[]               @relation("bi_match_result_loser_idTobi_user")
  bi_match_result_bi_match_result_owner_idTobi_user             bi_match_result[]               @relation("bi_match_result_owner_idTobi_user")
  bi_match_result_bi_match_result_winner_idTobi_user            bi_match_result[]               @relation("bi_match_result_winner_idTobi_user")
  bi_message                                                    bi_message[]
  bi_message_read                                               bi_message_read[]
  bi_message_read_by                                            bi_message_read_by[]

  @@unique([social_id, provider], map: "unique_social_id_provider")
  @@map("bi_user")
  @@schema("public")
}

model Game {
  id          Int      @id @default(autoincrement())
  gameType    GameType
  description String?
  gameAverage String?
  gameHighrun Int
  gameInning  Int
  createdAt   DateTime @default(now())
  endAt       DateTime @default(now())

  @@map("bi_game")
  @@schema("public")
}

model Club {
  club_contact_email                          String?                @db.VarChar(100)
  club_contact_phone                          String?                @db.VarChar(20)
  club_created_at                             DateTime               @default(now()) @db.Timestamp(6)
  club_description                            String?
  club_founding_date                          DateTime?              @default(now()) @db.Timestamp(6)
  club_id                                     Int                    @id @default(autoincrement())
  club_location                               String                 @db.VarChar(100)
  club_max_members                            Int?                   @default(50)
  club_name                                   String                 @db.VarChar(100)
  club_now_members                            Int?                   @default(1)
  club_owner_id                               String                 @db.VarChar
  club_place_address                          String?
  club_place_name                             String?                @db.VarChar(100)
  club_regular_day                            String?                @db.VarChar(50)
  club_rules                                  String[]
  club_type                                   String?                @db.VarChar
  club_updated_at                             DateTime               @default(now()) @db.Timestamp(6)
  profile_image_id                            Int?
  banner_image_id                             Int?
  bi_image_bi_club_banner_image_idTobi_image  bi_image?              @relation("bi_club_banner_image_idTobi_image", fields: [banner_image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bi_user                                     User                   @relation(fields: [club_owner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_image_bi_club_profile_image_idTobi_image bi_image?              @relation("bi_club_profile_image_idTobi_image", fields: [profile_image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bi_club_announcement                        bi_club_announcement[]
  bi_club_gallery                             bi_club_gallery[]
  bi_club_join_request                        bi_club_join_request[]
  bi_club_member                              bi_club_member[]
  bi_club_schedule                            bi_club_schedule[]
  bi_club_tag                                 bi_club_tag[]

  @@map("bi_club")
  @@schema("public")
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String   @db.VarChar(100)
  address     String   @db.VarChar(255)
  latitude    Float
  longitude   Float
  phone       String?  @db.VarChar(20)
  timeStart   DateTime
  timeEnd     DateTime
  threeBall   Int
  fourBall    Int
  tableType   Int
  createdAt   DateTime @default(now())

  @@map("bi_location")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_admin {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  role       String
  last_login DateTime? @db.Timestamp(6)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_maintenance_record {
  id          Int      @id @default(autoincrement())
  table_id    Int
  date        DateTime @db.Timestamp(6)
  description String
  status      String
  checked_by  String
  bi_table    bi_table @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_member {
  id               Int                @id @default(autoincrement())
  name             String
  phone            String             @unique
  grade            String
  join_date        DateTime?          @default(now()) @db.Timestamp(6)
  visits           Int?               @default(0)
  total_spent      Int?               @default(0)
  point            Int?               @default(0)
  last_visit       DateTime?          @db.Timestamp(6)
  bi_usage_history bi_usage_history[]

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_reservations {
  id               Int       @id @default(autoincrement())
  store_id         Int
  table_number     Int
  customer_name    String    @db.VarChar(50)
  phone            String    @db.VarChar(20)
  reservation_date DateTime  @db.Date
  start_time       DateTime  @db.Time(6)
  end_time         DateTime  @db.Time(6)
  status           String?   @default("confirmed") @db.VarChar(20)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  bi_id            String?   @db.VarChar
  bi_store         bi_store  @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_setting {
  id         Int       @id @default(autoincrement())
  key        String    @unique
  value      String
  category   String
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("ownerdb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_store {
  id               Int                      @id @default(autoincrement())
  name             String
  business_no      String?
  owner_name       String?
  phone            String?
  address          String?
  open_time        String?
  close_time       String?
  comment          String?                  @db.VarChar
  hourly_rate      Int?
  per_minute       Int?
  least_rate       Int?
  open_yoil        String?
  bi_id            String?                  @unique(map: "unique_bi_id") @db.VarChar
  has_table        Int?
  directions       String?                  @db.VarChar
  parking_type     String?                  @db.VarChar
  parking_capacity Int?
  parking_note     String?                  @db.VarChar
  weekend_rate     Int?
  brand            String?                  @db.VarChar
  facilities       String?                  @db.VarChar
  saturday_open    String?                  @db.VarChar
  saturday_close   String?                  @db.VarChar
  sunday_open      String?                  @db.VarChar
  sunday_close     String?                  @db.VarChar
  regular_holiday  String?
  created_at       DateTime?                @db.Date
  updated_at       DateTime?                @db.Date
  phone_store      String?                  @db.VarChar
  coord_x          String?                  @db.VarChar
  coord_y          String?                  @db.VarChar
  register_id      String?                  @db.VarChar
  geom             Unsupported("geometry")?
  bi_reservations  bi_reservations[]
  bi_favorites     bi_favorites[]
  bi_recent_search bi_recent_search[]
  bi_recent_visit  bi_recent_visit[]

  @@index([geom], map: "idx_bi_store_geom", type: Gist)
  @@map("bi_store")
  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_table {
  id                    Int                     @id @default(autoincrement())
  name                  String
  type                  String
  status                String
  hourly_rate           Int
  bi_id                 String                  @db.VarChar
  table_no              Int?
  x                     Float?                  @default(50)
  y                     Float?                  @default(50)
  width                 Float?                  @default(120)
  height                Float?                  @default(60)
  rotation              Int?
  bi_maintenance_record bi_maintenance_record[]
  bi_usage_history      bi_usage_history[]

  @@schema("ownerdb")
}

model bi_usage_history {
  id        Int       @id @default(autoincrement())
  member_id Int
  table_id  Int
  date      DateTime  @db.Timestamp(6)
  duration  Float
  amount    Int
  bi_member bi_member @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_table  bi_table  @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("ownerdb")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_match {
  match_id                             Int                   @id(map: "matches_pkey") @default(autoincrement())
  player1_id                           String?               @db.VarChar
  player2_id                           String?               @db.VarChar
  match_date                           DateTime?             @default(now()) @db.Timestamp(6)
  location                             String?               @db.VarChar(255)
  player1_score                        Int?
  player2_score                        Int?
  winner_id                            String?               @db.VarChar
  loser_id                             String?               @db.VarChar
  player1_dama                         Decimal?              @db.Decimal(5, 2)
  player2_dama                         Decimal?              @db.Decimal(5, 2)
  match_duration                       Int?
  request_status                       request_status?
  request_date                         DateTime?             @default(now()) @db.Timestamp(6)
  response_date                        DateTime?             @db.Timestamp(6)
  preferred_date                       DateTime?             @db.Timestamp(6)
  message                              String?               @db.VarChar(500)
  cancel_reason                        String?               @db.VarChar(200)
  cancelled_by                         String?               @db.VarChar
  is_notified                          Boolean?              @default(false)
  notification_date                    DateTime?             @db.Timestamp(6)
  match_status                         match_status?         @default(PENDING)
  game_type                            game_type_enum?
  bi_user_bi_match_loser_idTobi_user   User?                 @relation("bi_match_loser_idTobi_user", fields: [loser_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction, map: "matches_loser_id_fkey")
  bi_user_bi_match_player1_idTobi_user User?                 @relation("bi_match_player1_idTobi_user", fields: [player1_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction, map: "matches_player1_id_fkey")
  bi_user_bi_match_player2_idTobi_user User?                 @relation("bi_match_player2_idTobi_user", fields: [player2_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction, map: "matches_player2_id_fkey")
  bi_user_bi_match_winner_idTobi_user  User?                 @relation("bi_match_winner_idTobi_user", fields: [winner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction, map: "matches_winner_id_fkey")
  bi_match_dispute                     bi_match_dispute[]
  bi_match_evaluation                  bi_match_evaluation[]
  bi_match_request                     bi_match_request[]
  bi_match_result                      bi_match_result[]

  @@schema("public")
}

model bi_match_request {
  request_id                                     Int       @id @default(autoincrement())
  match_id                                       Int
  requester_id                                   String    @db.VarChar
  recipient_id                                   String    @db.VarChar
  request_status                                 String?   @default("PENDING") @db.VarChar(10)
  request_date                                   DateTime? @default(now()) @db.Timestamp(6)
  response_date                                  DateTime? @db.Timestamp(6)
  preferred_date                                 DateTime? @db.Timestamp(6)
  message                                        String?   @db.VarChar(500)
  game_type                                      String?   @db.VarChar(10)
  location                                       String?   @db.VarChar(255)
  is_notified                                    Boolean?  @default(false)
  bi_match                                       bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_request_recipient_idTobi_user User      @relation("bi_match_request_recipient_idTobi_user", fields: [recipient_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_request_requester_idTobi_user User      @relation("bi_match_request_requester_idTobi_user", fields: [requester_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model bi_match_dispute {
  dispute_id                                    Int       @id @default(autoincrement())
  match_id                                      Int
  reporter_id                                   String    @db.VarChar
  dispute_type                                  String?   @db.VarChar(50)
  description                                   String?
  evidence_urls                                 String[]
  status                                        String?   @default("PENDING") @db.VarChar(20)
  resolved_by                                   String?   @db.VarChar
  resolved_at                                   DateTime? @db.Timestamp(6)
  resolution_note                               String?
  created_at                                    DateTime? @default(now()) @db.Timestamp(6)
  bi_match                                      bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_dispute_reporter_idTobi_user User      @relation("bi_match_dispute_reporter_idTobi_user", fields: [reporter_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_dispute_resolved_byTobi_user User?     @relation("bi_match_dispute_resolved_byTobi_user", fields: [resolved_by], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bi_match_evaluation {
  evaluation_id                                     Int       @id @default(autoincrement())
  match_id                                          Int
  evaluator_id                                      String    @db.VarChar
  target_id                                         String    @db.VarChar
  manner_rating                                     Int?
  skill_rating                                      Int?
  skill_accuracy_rating                             Int?
  comment                                           String?
  created_at                                        DateTime? @default(now()) @db.Timestamp(6)
  is_anonymous                                      Boolean?  @default(false)
  reported                                          Boolean?  @default(false)
  bi_user_bi_match_evaluation_evaluator_idTobi_user User      @relation("bi_match_evaluation_evaluator_idTobi_user", fields: [evaluator_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_match                                          bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_evaluation_target_idTobi_user    User      @relation("bi_match_evaluation_target_idTobi_user", fields: [target_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model bi_match_result {
  result_id                                  Int       @id @default(autoincrement())
  match_id                                   Int
  winner_id                                  String    @db.VarChar
  loser_id                                   String    @db.VarChar
  winner_score                               Int
  loser_score                                Int
  game_duration                              Int?
  verified_by                                String?   @default("PENDING") @db.VarChar(20)
  verified_at                                DateTime? @db.Timestamp(6)
  owner_id                                   String?   @db.VarChar
  player1_confirm                            Boolean?  @default(false)
  player2_confirm                            Boolean?  @default(false)
  created_at                                 DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime? @default(now()) @db.Timestamp(6)
  status                                     String?   @default("PENDING") @db.VarChar(20)
  bi_user_bi_match_result_loser_idTobi_user  User      @relation("bi_match_result_loser_idTobi_user", fields: [loser_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_match                                   bi_match  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_result_owner_idTobi_user  User?     @relation("bi_match_result_owner_idTobi_user", fields: [owner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)
  bi_user_bi_match_result_winner_idTobi_user User      @relation("bi_match_result_winner_idTobi_user", fields: [winner_id], references: [mb_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_alert {
  id         Int       @id @default(autoincrement())
  user_id    Int
  title      String    @db.VarChar(200)
  message    String
  type       String?   @db.VarChar(50)
  status     String?   @default("unread") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  read_at    DateTime? @db.Timestamp(6)
  category   String?   @db.VarChar(50)
  data       Json?
  bi_user    User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_alert_log {
  id              Int       @id @default(autoincrement())
  event_type      String    @db.VarChar(50)
  description     String?
  user_id         Int?
  ip_address      String?   @db.VarChar(45)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  additional_data Json?
  bi_user         User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model bi_match_reg {
  id                   Int                    @id @default(autoincrement())
  match_type           MatchType              @default(ONE_VS_ONE)
  game_type            game_type_enum         @default(FOUR_BALL)
  creator_id           Int
  status               match_status           @default(PENDING)
  player_count         Int
  current_players      Int                    @default(1)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  billiard_place       String?                @db.VarChar
  match_date           DateTime?              @db.Timestamp(6)
  bi_match_participant bi_match_participant[]
  bi_user              User                   @relation(fields: [creator_id], references: [id])

  @@schema("public")
}

model bi_match_participant {
  id           Int          @id @default(autoincrement())
  match_id     Int
  user_id      Int
  team         Int
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  bi_match_reg bi_match_reg @relation(fields: [match_id], references: [id])
  bi_user      User         @relation(fields: [user_id], references: [id])

  @@unique([match_id, user_id])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_favorites {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(255)
  place_id   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  bi_store   bi_store  @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bi_favorites_store")

  @@unique([user_id, place_id])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_recent_search {
  id          Int       @id @default(autoincrement())
  user_id     String    @db.VarChar(255)
  search_term String    @db.VarChar(255)
  place_id    Int?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  bi_store    bi_store? @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bi_recent_search_store")

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_recent_visit {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(255)
  place_id   Int
  visit_date DateTime? @default(now()) @db.Timestamp(6)
  bi_store   bi_store  @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bi_recent_visit_store")

  @@index([user_id, visit_date(sort: Desc)], map: "idx_user_visited")
  @@schema("public")
}

model bi_chat_room {
  id                        String                      @id
  name                      String
  group_id                  String
  created_at                DateTime                    @default(now())
  updated_at                DateTime
  bi_chat_room_participants bi_chat_room_participants[]
  bi_message                bi_message[]

  @@schema("public")
}

model bi_message {
  id                 String               @id
  content            String
  sender_id          String
  chat_room_id       String
  created_at         DateTime             @default(now())
  bi_chat_room       bi_chat_room         @relation(fields: [chat_room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_user            User                 @relation(fields: [sender_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)
  bi_message_read    bi_message_read[]
  bi_message_read_by bi_message_read_by[]

  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model bi_chat_room_participants {
  A            String
  B            String
  bi_chat_room bi_chat_room @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_user      User         @relation(fields: [B], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([A, B])
  @@index([B], map: "bi_chat_room_participants_B_index")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model bi_message_read_by {
  A          String
  B          String
  bi_message bi_message @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_user    User       @relation(fields: [B], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([A, B])
  @@index([B], map: "bi_message_read_by_B_index")
  @@schema("public")
}

model bi_message_read {
  id           String     @id
  message_id   String
  user_id      String
  read_at      DateTime   @default(now()) @db.Timestamp(6)
  chat_room_id String     @db.VarChar
  bi_message   bi_message @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bi_user      User       @relation(fields: [user_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([message_id, user_id], map: "bi_message_read_message_user_unique")
  @@index([user_id], map: "bi_message_read_user_idx")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_announcement {
  club_announcement_id Int      @id @default(autoincrement())
  club_id              Int
  title                String   @db.VarChar(200)
  content              String
  created_at           DateTime @default(now()) @db.Timestamp(6)
  created_by           String   @db.VarChar
  bi_club              Club     @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)
  bi_user              User     @relation(fields: [created_by], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_gallery {
  club_gallery_id          Int      @id @default(autoincrement())
  club_id                  Int
  club_gallery_image_url   String
  club_gallery_description String?  @db.VarChar(200)
  uploaded_at              DateTime @default(now()) @db.Timestamp(6)
  uploaded_by              String   @db.VarChar
  bi_club                  Club     @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)
  bi_user                  User     @relation(fields: [uploaded_by], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_join_request {
  request_id   Int      @id @default(autoincrement())
  club_id      Int
  user_id      String   @db.VarChar
  status       String?  @default("pending") @db.VarChar(20)
  requested_at DateTime @default(now()) @db.Timestamp(6)
  bi_club      Club     @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)
  bi_user      User     @relation(fields: [user_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_member {
  club_id                 Int
  user_id                 String   @db.VarChar
  is_staff                Boolean? @default(false)
  staff_role              String?  @db.VarChar(50)
  joined_at               DateTime @default(now()) @db.Timestamp(6)
  member_permission_level String?  @default("member") @db.VarChar(20)
  bi_club                 Club     @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)
  bi_user                 User     @relation(fields: [user_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([club_id, user_id])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_schedule {
  club_schedule_id              Int                             @id @default(autoincrement())
  club_id                       Int
  club_schedule_title           String                          @db.VarChar(100)
  club_schedule_description     String?
  club_schedule_location        String?                         @db.VarChar(100)
  club_schedule_start_time      DateTime                        @db.Timestamp(6)
  club_schedule_end_time        DateTime?                       @db.Timestamp(6)
  club_schedule_is_competition  Boolean?                        @default(false)
  bi_club                       Club                            @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)
  bi_club_schedule_participants bi_club_schedule_participants[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_schedule_participants {
  club_schedule_id Int
  user_id          String           @db.VarChar
  status           String?          @default("pending") @db.VarChar(20)
  bi_club_schedule bi_club_schedule @relation(fields: [club_schedule_id], references: [club_schedule_id], onDelete: Cascade, onUpdate: NoAction)
  bi_user          User             @relation(fields: [user_id], references: [mb_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([club_schedule_id, user_id])
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bi_club_tag {
  club_tag_id Int    @id @default(autoincrement())
  club_id     Int
  name        String @db.VarChar(50)
  bi_club     Club   @relation(fields: [club_id], references: [club_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model bi_image {
  id                                         Int       @id @default(autoincrement())
  url                                        String
  public_id                                  String?
  file_name                                  String
  file_size                                  Int
  file_type                                  String
  width                                      Int?
  height                                     Int?
  alt                                        String?
  description                                String?
  user_id                                    String?
  entity_type                                String?
  entity_id                                  String?
  created_at                                 DateTime  @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime? @default(now()) @db.Timestamp(6)
  bi_club_bi_club_banner_image_idTobi_image  Club[]    @relation("bi_club_banner_image_idTobi_image")
  bi_club_bi_club_profile_image_idTobi_image Club[]    @relation("bi_club_profile_image_idTobi_image")

  @@schema("public")
}

enum GameType {
  THREE_BALL @map("3구")
  FOUR_BALL  @map("4구")

  @@schema("public")
}

enum game_type_enum {
  THREE_BALL
  FOUR_BALL
  POCKET_BALL

  @@schema("public")
}

enum match_request_type_enum {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED

  @@schema("public")
}

enum match_status {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  EVALUATE
  REJECTED

  @@schema("public")
}

enum match_status_enum {
  COMPLETED
  ONGOING
  CANCELED

  @@schema("public")
}

enum request_status {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED

  @@schema("public")
}

enum MatchType {
  ONE_VS_ONE
  TWO_VS_TWO

  @@schema("public")
}
